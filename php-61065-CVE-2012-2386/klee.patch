diff --git a/Zend/zend_alloc.c b/Zend/zend_alloc.c
index ab226cb..05818a8 100644
--- a/Zend/zend_alloc.c
+++ b/Zend/zend_alloc.c
@@ -659,6 +659,7 @@ static void *_zend_mm_realloc_int(zend_mm_heap *heap, void *p, size_t size ZEND_
 
 static inline unsigned int zend_mm_high_bit(size_t _size)
 {
+/*
 #if defined(__GNUC__) && defined(i386)
 	unsigned int n;
 
@@ -674,17 +675,21 @@ static inline unsigned int zend_mm_high_bit(size_t _size)
 		bsr eax, _size
 	}
 #else
+*/
 	unsigned int n = 0;
 	while (_size != 0) {
 		_size = _size >> 1;
 		n++;
 	}
 	return n-1;
+/*
 #endif
+*/
 }
 
 static inline unsigned int zend_mm_low_bit(size_t _size)
 {
+/*
 #if defined(__GNUC__) && defined(i386)
 	unsigned int n;
 
@@ -700,6 +705,7 @@ static inline unsigned int zend_mm_low_bit(size_t _size)
 		bsf eax, _size
    }
 #else
+*/
 	static const int offset[16] = {4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0};
 	unsigned int n;
 	unsigned int index = 0;
@@ -712,7 +718,9 @@ static inline unsigned int zend_mm_low_bit(size_t _size)
 	}
 
 	return index + n;
+/*
 #endif
+*/
 }
 
 static inline void zend_mm_add_to_rest_list(zend_mm_heap *heap, zend_mm_free_block *mm_block)
@@ -982,7 +990,7 @@
 		   }
 		} while (0);
 	}
-#elif defined(HAVE_DEV_URANDOM)
+#elif 0 && defined(HAVE_DEV_URANDOM)
 	int fd = open("/dev/urandom", 0);
 
 	if (fd >= 0) {
@@ -2399,6 +2407,7 @@ static inline size_t safe_address(size_t nmemb, size_t size, size_t offset)
 	return res;
 }
 
+/*
 #elif defined(__GNUC__) && defined(__x86_64__)
 
 static inline size_t safe_address(size_t nmemb, size_t size, size_t offset)
@@ -2418,6 +2427,7 @@ static inline size_t safe_address(size_t nmemb, size_t size, size_t offset)
         }
         return res;
 }
+*/
 
 #elif SIZEOF_SIZE_T == 4 && defined(HAVE_ZEND_LONG64)
 
diff --git a/Zend/zend_float.h b/Zend/zend_float.h
index deb5114..1ba8a22 100644
--- a/Zend/zend_float.h
+++ b/Zend/zend_float.h
@@ -206,7 +206,8 @@ extern ZEND_API void zend_ensure_fpu_mode(TSRMLS_D);
                 return _xpfpa_result; \
             } while (0)
 
-#elif defined(HAVE__FPU_SETCW) /* glibc systems */
+//#elif defined(HAVE__FPU_SETCW) /* glibc systems */
+#elif 0
 
 /* fpu_control.h defines _FPU_[GS]ETCW */
 # include <fpu_control.h>
@@ -265,7 +266,8 @@ extern ZEND_API void zend_ensure_fpu_mode(TSRMLS_D);
                 return _xpfpa_result; \
             } while (0)
 
-#elif defined(HAVE_FPSETPREC) /* FreeBSD */
+//#elif defined(HAVE_FPSETPREC) /* FreeBSD */
+#elif 0
 
 /* fpu_control.h defines _FPU_[GS]ETCW */
 # include <machine/ieeefp.h>
@@ -321,7 +323,8 @@ extern ZEND_API void zend_ensure_fpu_mode(TSRMLS_D);
                 return _xpfpa_result; \
             } while (0)
 
-#elif defined(HAVE_FPU_INLINE_ASM_X86)
+//#elif defined(HAVE_FPU_INLINE_ASM_X86)
+#elif 0
 
 /*
   Custom x86 inline assembler implementation.
